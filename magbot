#!/usr/bin/env perl
use strict;
use warnings;

use XML::LibXML;
use File::Basename;

binmode STDOUT, ":utf8";

=pod

=head1 NAME

magbot - For fetching media from jw.org feeds

=head1 SYNOPSIS

    > magbot

=head1 DESCRIPTION

For use on Android devices via SL4A (see http://code.google.com/p/android-scripting/)
or via command line.

=head1 AUTHOR

Delon Newman <delon.newman@gmail.com>

=cut

#
# Settings
#
my @FORMATS   = qw{ EPUB };
my @LANGUAGES = qw{ E };
my @MAGS      = qw{ w wp g };

my $ROOT_URL = 'http://www.jw.org/index.xjp';
my $APP_NAME = 'MagBot';

my $DIR = {
    audio => "$ENV{HOME}/Podcasts",
    pub   => ["/media/NOOK/My Files/Magazines", "$ENV{HOME}/Reading"]
};

my %FORMATS = (
    MP3  => 'audio',
    M4B  => 'audio',
    EPUB => 'pub',
    PDF  => 'pub'
);
    
#
# Some monkey business for cross-platformability
#
BEGIN {
    #
    # Print messages with Gtk2::Notify, to syslog, and to STDOUT
    # any of which are available.
    #
    my $gtk;
    eval {
        require Gtk2::Notify;
        Gtk2::Notify->import(-init, basename $0);
        $gtk = 1;  
    };

    my $syslog;
    eval {
        require Sys::Syslog
        Sys::Syslog->import(qw{ :standard });
        $syslog = 1;
    };

    sub notify {
        if ( $gtk ) {
            Gtk2::Notify->new($APP_NAME . ' says:', join('', @_))->show;
        }

        if ( $syslog ) {
            openlog $APP_NAME, 'ndelay,pid', 'local0';
            syslog 'info', @_;
            closelog;
        }

        print @_, "\n"
    }

    #
    # Try loading LWP::Simple, otherwise use HTTP::Tiny
    # to create work alikes for 'get' and 'getstore'
    #
    eval {
        require LWP::Simple;
        LWP::Simple->import;
    };
    if ( $@ ) {
        require HTTP::Tiny;
        HTTP::Tiny->import;
    
        no strict 'subs';
        
        *get = sub { HTTP::Tiny->new->get(@_)->{content} };
    
        *getstore = sub {
            my $url  = shift;
            my $file = shift;
        
            my $content = get $url;
            open FILE, '>', $file or die "cannot open $file";
            print FILE $file;
            close FILE;
        };
    
        use strict 'subs';
    }
}

#
# For parsing feeds
#
sub parse_feed {
    local $_ = shift; # content
    my %feed = ();

    my $dom  = XML::LibXML->load_xml(string => $_);
    my $chan = $dom->getElementsByTagName('channel')->get_node(0);

    sub child {
        my ($parent, %args) = @_;

        my @tags  = @{$args{tags}} if $args{tags};
        my $tag   = $args{tag} // shift @tags;
        my $nodes = $parent->getChildrenByTagName($tag);

        if ( $nodes->size > 1 ) {
            my @elems = $nodes->get_nodelist;
            wantarray ? @elems : \@elems;
        } else {
            my $elem  = $nodes->get_node(0);

            if    ( $args{attr} ) { $elem->getAttribute($args{attr}) }
            elsif ( !@tags )      { $elem->textContent }
            else                  { child($elem, tags => \@tags) }
        }
    }

    sub items {
        my ($feed, @elems) = @_;

        my @items = map {
          { title => child($_, tag => 'title'),
            link  => child($_, tag => 'link'),
            date  => child($_, tag => 'pubDate'),
            feed  => $feed }
        } @elems;

        \@items;
    }
    
    $feed{title}       = child $chan, tag  => 'title';
    $feed{description} = child $chan, tag  => 'description';
    $feed{language}    = child $chan, tag  => 'language';
    $feed{image}       = child $chan, tags => ['image', 'url'];
    $feed{url}         = child $chan, tag  => 'atom:link', attr => 'href';
    $feed{items}       = items(\%feed, child($chan, tag => 'item'));

    # TODO: remove this
    (my $pub, $feed{format}) = split ' ', $feed{description};
    $pub =~ /([a-z]+)([A-Z]+)/;
    ($feed{mag}, $feed{lang}) = ($1, $2);

    \%feed;
}

#
# Some functions for accessing directory structure
#

sub feed_dir {
    my $feed = shift;

    $feed->{dir} //= root_dir($feed) . '/' . $feed->{title};

    $feed->{dir};
}

sub root_dir {
    my $feed = shift;
    my $type = $FORMATS{$feed->{format}} ||
        die 'cannot find root directory for: ', $feed->{format};

    if ( ref $DIR eq 'HASH' ) {
        if ( ref $DIR->{$type} eq 'ARRAY' ) {
            if ( -e $DIR->{$type}->[0] ) { $DIR->{$type}->[0] }
            else                         { $DIR->{$type}->[1] }
        }
        else { $DIR->{$type} }
    }
    else { $DIR }
}

sub issue_dir {
    my ($item, $feed_dir) = @_;
    $feed_dir . '/' . $item->{date};
}

sub item_dir {
    my ($item) = @_;
    my $issue_dir = issue_dir $item, feed_dir($item->{feed});

    $item->{dir} //= $issue_dir . '/' . item_file($item);

    $item->{dir}
}

sub item_file  {
    my ($item) = @_;

    $item->{file} //= basename $item->{link} if $item->{link};

    $item->{file};
}

#
# Top-Level Functions
#
sub download_feeds { map { get $_ } @_ }

sub find_new {
    map  {  $_->[1] }
    grep { !$_->[0] }
    map  { map { [ -e item_dir($_), $_ ]  } @{$_->{items}} } @_;
}

sub download_media {
    my @urls = @_;

    notify "Downloading feeds and checking for new items...";

    my @items = find_new map { parse_feed $_ } download_feeds @urls;
    if ( int(@items) == 0 ) {
        notify "There's nothing new in your feeds.";
        exit;
    }

    notify "Downloading ", int(@items), " items...\n";
    
    for my $item (@items) {
        my $root_dir = root_dir $item->{feed};
        mkdir $root_dir unless -e $root_dir;

        my $feed_dir = feed_dir $item->{feed};
        mkdir $feed_dir unless -e $feed_dir;

        my $issue_dir = issue_dir $item, $feed_dir;
        mkdir $issue_dir unless -e $issue_dir;

        my $path = item_dir $item;
        if ( -e $path ) {
            print "  '", $item->{title}, "' exists at\n   --> '", $path, "'\n\n";
        } elsif ( !$item->{link} ) {
            next;
        } else {
            print "  downloading '", $item->{title}, "' to \n  --> ", $path, "\n";

            getstore $item->{link}, $path unless -e $path;
            print "  ok.\n\n";
        }
    }
    
    notify "Okay the work is complete! ;-)";
}

# applies codref to list entries; for readability, toOO many nested maps
sub apply {
    my ($fn, @list) = @_;
    map { $fn->($_) } @list;
}

# partially applied function to da FACE!!
sub gen_urls {
    my ($format) = @_;

    my %types = (
        audio => 'sFFZRQVNZNT',
        pub   => 'sFFCsVrGZNT'
    );
    
    my $type = $FORMATS{$format};

    sub {
        my ($mag) = @_;
        sub {
            my ($lang) = @_;
            "$ROOT_URL?option=$types{$type}&rln=$lang&rmn=$mag&rfm=$format";
        }
    }
}

# Now to the main event!!
if ( __FILE__ eq $0 ) {
    my @urls =
        map { apply $_, @LANGUAGES }
        map { apply $_, @MAGS }
        map { gen_urls $_ } @FORMATS;

    download_media @urls;
}
